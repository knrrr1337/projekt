import java.util.Scanner;

public class ticTacToe {

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        char[][] ticTacToe = {{'-', '-', '-'}, {'-', '-', '-'}, {'-', '-', '-'}};

        //PLAYER ONE = X
        int playerOneX = 0;
        int playerOneY = 0;

        //PLAYER TWO = O
        int playerTwoX = 0;
        int playerTwoY = 0;

        boolean gameOver = false;
        boolean kovetkezoKor = true;
        boolean isPosValid;

        int lepesekSzama = 0;

        String playerOneWinner;
        String playerTwoWinner;

        while (kovetkezoKor) {

            //PLAYER 1 :

            //check if dontetlen :
            if (lepesekSzama == 9 && !gameOver) {
                System.out.println("Nincs már több lehetséges lépés, a játék döntetlen!");
                gameOver = true;
                kovetkezoKor = false;
            }

            //kerje be Player 1 poziciokat, ha meg nincs game over :

            //update game state, ha meg nincs game over :
            if (!gameOver) {
                isPosValid = false;
                while (!isPosValid) {
                    System.out.print("Player 1 (X) X-tengely pozicio: ");
                    playerOneX = sc.nextInt();
                    System.out.print("Player 1 (X) Y-tengely pozicio: ");
                    playerOneY = sc.nextInt();
                    if (ticTacToe[playerOneY][playerOneX] != '-' ) {
                        System.out.println("ez a pozicio mar foglalt, go agane!");
                    } else {
                        ticTacToe[playerOneY][playerOneX] = 'X';
                        lepesekSzama++;
                        isPosValid = true;
                    }
                }
            }


            //horizontal check for Player 1 :
            playerOneWinner = "Vége a játéknak, Player 1 (X) győzott " + lepesekSzama + " lépésből!";
            if (
                //1. sor :
                    ticTacToe[0][0] == 'X' &&
                            ticTacToe[0][1] == 'X' &&
                            ticTacToe[0][2] == 'X' ||

                            //2. sor :
                            ticTacToe[1][0] == 'X' &&
                                    ticTacToe[1][1] == 'X' &&
                                    ticTacToe[1][2] == 'X' ||

                            //3. sor :
                            ticTacToe[2][0] == 'X' &&
                                    ticTacToe[2][1] == 'X' &&
                                    ticTacToe[2][2] == 'X'
            ) {
                gameOver = true;
                kovetkezoKor = false;
                for (int i = 0; i < ticTacToe.length; i++) {
                    for (int j = 0; j < ticTacToe[i].length; j++) {
                        System.out.print(ticTacToe[i][j] + "\t");
                    }
                    System.out.println("");
                }
                System.out.println(playerOneWinner);
            }

            //verical check for Player 1 :
            if (
                //1. oszlop :
                    ticTacToe[0][0] == 'X' &&
                            ticTacToe[1][0] == 'X' &&
                            ticTacToe[2][0] == 'X' ||

                            //2. oszlop :
                            ticTacToe[0][1] == 'X' &&
                                    ticTacToe[1][1] == 'X' &&
                                    ticTacToe[2][1] == 'X' ||

                            //3. oszlop :
                            ticTacToe[0][2] == 'X' &&
                                    ticTacToe[1][2] == 'X' &&
                                    ticTacToe[2][2] == 'X'
            ) {
                gameOver = true;
                kovetkezoKor = false;
                for (int i = 0; i < ticTacToe.length; i++) {
                    for (int j = 0; j < ticTacToe[i].length; j++) {
                        System.out.print(ticTacToe[i][j] + "\t");
                    }
                    System.out.println("");
                }
                System.out.println(playerOneWinner);
            }

            //diagonal check for Player 1 :
            if (
                //bal felso saroktol jobb also sarokig :
                    ticTacToe[0][0] == 'X' &&
                            ticTacToe[1][1] == 'X' &&
                            ticTacToe[2][2] == 'X' ||

                            //jobb felso saroktol bal also sarokig :
                            ticTacToe[2][0] == 'X' &&
                                    ticTacToe[1][1] == 'X' &&
                                    ticTacToe[0][2] == 'X'
            ) {
                gameOver = true;
                kovetkezoKor = false;
                for (int i = 0; i < ticTacToe.length; i++) {
                    for (int j = 0; j < ticTacToe[i].length; j++) {
                        System.out.print(ticTacToe[i][j] + "\t");
                    }
                    System.out.println("");
                }
                System.out.println(playerOneWinner);
            }


            //irja ki az updated game state-t, ha meg nincs game over :
            if (!gameOver) {
                System.out.println(lepesekSzama);
                for (int i = 0; i < ticTacToe.length; i++) {
                    for (int j = 0; j < ticTacToe[i].length; j++) {
                        System.out.print(ticTacToe[i][j] + "\t");
                    }
                    System.out.println("");
                }
            }










            //PLAYER 2 :



            //check if dontetlen :
            if (lepesekSzama == 9 && !gameOver) {
                System.out.println("Nincs már több lehetséges lépés, a játék döntetlen!");
                gameOver = true;
                kovetkezoKor = false;
            }

            //kerje be Player 2 poziciokat, ha meg nincs game over :

            //update game state, ha meg nincs game over :
            if (!gameOver) {
                isPosValid = false;
                while (!isPosValid) {
                    System.out.print("Player 2 (O) X-tengely pozicio: ");
                    playerTwoX = sc.nextInt();
                    System.out.print("Player 2 (O) Y-tengely pozicio: ");
                    playerTwoY = sc.nextInt();
                    if (ticTacToe[playerTwoY][playerTwoX] != '-') {
                        System.out.println("ez nem jo, go agane!");
                    } else {
                        ticTacToe[playerTwoY][playerTwoX] = 'O';
                        lepesekSzama++;
                        isPosValid = true;
                    }
                }
            }


            //horizontal check for Player 2 :
            playerTwoWinner = "Vége a játéknak, Player 2 (O) győzott " + lepesekSzama + " lépésből!";
            if (
                //1. sor :
                    ticTacToe[0][0] == 'O' &&
                            ticTacToe[0][1] == 'O' &&
                            ticTacToe[0][2] == 'O' ||

                            //2. sor :
                            ticTacToe[1][0] == 'O' &&
                                    ticTacToe[1][1] == 'O' &&
                                    ticTacToe[1][2] == 'O' ||

                            //3. sor :
                            ticTacToe[2][0] == 'O' &&
                                    ticTacToe[2][1] == 'O' &&
                                    ticTacToe[2][2] == 'O'
            ) {
                gameOver = true;
                kovetkezoKor = false;
                for (int i = 0; i < ticTacToe.length; i++) {
                    for (int j = 0; j < ticTacToe[i].length; j++) {
                        System.out.print(ticTacToe[i][j] + "\t");
                    }
                    System.out.println("");
                }
                System.out.println(playerTwoWinner);
            }

            //vertical check for Player 2 :
            if (
                //1. oszlop :
                    ticTacToe[0][0] == 'O' &&
                            ticTacToe[1][0] == 'O' &&
                            ticTacToe[2][0] == 'O' ||

                            //2. oszlop :
                            ticTacToe[0][1] == 'O' &&
                                    ticTacToe[1][1] == 'O' &&
                                    ticTacToe[2][1] == 'O' ||

                            //3. oszlop :
                            ticTacToe[0][2] == 'O' &&
                                    ticTacToe[1][2] == 'O' &&
                                    ticTacToe[2][2] == 'O'
            ) {
                gameOver = true;
                kovetkezoKor = false;
                for (int i = 0; i < ticTacToe.length; i++) {
                    for (int j = 0; j < ticTacToe[i].length; j++) {
                        System.out.print(ticTacToe[i][j] + "\t");
                    }
                    System.out.println("");
                }
                System.out.println(playerTwoWinner);
            }

            //diagonal check for Player 1 :
            if (
                //bal felso saroktol jobb also sarokig :
                    ticTacToe[0][0] == 'O' &&
                            ticTacToe[1][1] == 'O' &&
                            ticTacToe[2][2] == 'O' ||

                            //jobb felso saroktol bal also sarokig :
                            ticTacToe[2][0] == 'O' &&
                                    ticTacToe[1][1] == 'O' &&
                                    ticTacToe[0][2] == 'O'
            ) {
                gameOver = true;
                kovetkezoKor = false;
                for (int i = 0; i < ticTacToe.length; i++) {
                    for (int j = 0; j < ticTacToe[i].length; j++) {
                        System.out.print(ticTacToe[i][j] + "\t");
                    }
                    System.out.println("");
                }
                System.out.println(playerTwoWinner);
            }

            //irja ki az updated game state-t, ha meg nincs vege a jateknak :
            if (!gameOver) {
                System.out.println(lepesekSzama);
                for (int i = 0; i < ticTacToe.length; i++) {
                    for (int j = 0; j < ticTacToe[i].length; j++) {
                        System.out.print(ticTacToe[i][j] + "\t");
                    }
                    System.out.println("");
                }
            }
        }
    }
}
